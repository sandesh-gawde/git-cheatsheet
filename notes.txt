#https://help.github.com/en/github/using-git

Setup:
sudo apt-get install git
git config --global user.name "sandesh-gawde"
git config --global user.email "user@example.com"
git config --list   #To view global settings

To initiate:

git init            #creates a new empty Git repository locally with current direcory name
git clone https://url/remote-repository     #Clones remote repository locally by creatingremote-repository directory
git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1 #repo to help visual display of git
git status          #inspects the contents of the working directory and staging area
git restore <filename>              #To restore modified files content
git add             #adds files from the working directory to the staging area
git restore --staged <filename>     #To unstage file
git diff            #shows the difference between the working directory and the staging area
git commit          #permanently stores file changes from the staging area in the repository
git log             #shows a list of all previous commits

To correct author on commit:
- In case commit happend with wrong author name
i. amend ~/.gitconfig for correct author creds
ii. git commit --amend -C HEAD --reset-author
OR
git commit --amend --author="Author Name <email@address.com>" --no-edit                     #Didn't work for me.


#Sync with remote
git config --global user.name "sandesh-gawde"
git config user.email "email@example.com"
git config --global credential.helper wincred     #cache credentials
git clone https://github.com/sandesh-gawde/repo-name                                        #clone the repo on local system

git remote add origin https://github.com/sandesh-gawde/Intro_to_C_and_software_design.git  #link local repo with its remote repo. 
git push -u origin master                                                                   #push changes from local to remote, push master branch to origin.

git pull                                                                                    #Pull changes from remote to local


# Clone v/s remote add v/s fork
- When a repository is cloned to a local system, it is copied and linked to remote system. Any changes can be synced (pushed or pulled) with remote system.
git clone <url>

- To avoid syncing changes to other's repository, we can clone them and link with our remote system. By remote_delete + remote_add or set_url.
- Remote can simply be used to link any locally intiated repo with its remote repo

git remote remove origin
git remote add origin <url>
OR
git remote set-url origin <url>

- Fork can be used to clone without sync with other's repo. It is equivalent to clone and link to remote, without relating to author's repo.


git show HEAD: The commit you are currently on is known as the HEAD commit.
git checkout HEAD filename (git checkout -- filename): Discards changes in the working directory.
git reset HEAD filename: Unstages file changes in the staging area.
git reset commit_SHA: Resets to a previous commit in your commit history.

* Branch:
Each repository can have one or more branches. The main branch — the one where all changes eventually get merged back into, is called main. The main branch is usually the working version of a project and contains the production code, so it’s very important to only merge clean and correct code into it!

When someone wants to create a new feature, fix a bug, or just experiment, they should always create their own branch with a descriptive name.

git branch: Lists all a Git project’s branches.
git branch branch_name: Creates a new branch.
git checkout branch_name: Used to switch from one branch to another.
git merge branch_name: Used to join file changes from one branch to another, excute command by switching to parent branch.
git branch -d branch_name: Deletes the branch specified.
git branch -D branch_name: Delete un-merged branches.

* The workflow for Git collaborations typically follows this order:
Fetch and merge changes from the remote
Create a branch to work on a new project feature
Develop the feature on your branch and commit your work
Fetch and merge from the remote again (in case new commits were made while you were working) (sync local content with GitHub - git pull)
Create a pull-request for changes to be reviewed, once reviewed and approved, merge the changes.
Push your branch up.
Once the changes are merged, keep the active branches only and delete closed ones to manage workplace.

A remote is a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.
The Git Collaborative Workflow are steps that enable smooth project development when multiple collaborators are working on the same Git project.
We also learned the following commands

git clone: Creates a local copy of a remote.
git remote -v: Lists a Git project’s remotes.
git fetch origin: Fetches work from the remote into the local copy. Just fetches not merge.
git merge origin/master: Merges origin/master into your local branch.
git push origin <branch_name>: Pushes a local branch to the origin remote. Then the origin-master can merge this branch. Local Master is not pushed, any specified branch is pushed to origin Master, NOT changes but branch is pushed.

Additional:
git diff --staged       #show diff b/w staging area and last commit
git log -p              #show changes in each commit with commit-log
git log --stat          #show summary of each commit with commit-log    
git log -p ..origin/master      #shows changes in remote that are not in local

* SSH-auth:
On Linux:
$ ssh-keygen -t rsa -b 4096 -C "github_email@gmail.com"
$ eval "$(ssh-agent -s)"
$ ssh-add ~/.ssh/id_rsa
$ cat ~/.ssh/id_rsa.pub     #copy this key
On Git:
Profile - Settings - SSH and GPG Keys - New SSH key - Title(Key-name-TestTool) - insert key
Enter git pw if prompted
On Linux:
ssh -T git@github.com   #To verify
git clone git@github.com/user-name/repo   #copy url for UI, code, SSH

git branch --set-upstream-to=origin/<branch-name> master #link local repo with remote starting from master(origin/master master) or <branch-name>


* About README
--------------
Conventions of a Good README File
Your README file should be as good as your project itself.

Make your project stand out look professional by at least including the following elements in your README:

Project Title: the name of your project
Description: This is an extremely important component of the README. You should describe the main purpose of your project. Answer questions like “why did you build this project?” and “what problem(s) does it solve?”. It also helps to include your motivations for the project and what you learned from it.
Features: If your project has multiple features, list them here. Don’t be afraid to brag if your project has unique features that make it stand out. You can even add screenshots and gifs to show off the features.
How to use: Here, you should write step-by-step instructions on how to install and use your project. Any software or package requirements should also be listed here.
Technologies: List all the technologies and/or frameworks you used and what purpose they serve in your project.
Collaborators: If others have contributed to your project in any way, it is important to give them credit for their work. Write your team members’ or collaborators’ names here along with a link to their GitHub profile.
License: It’s also important to list a license on your README so other developers can understand what they can and cannot do with your project. You can use this guide to help you choose a license.
