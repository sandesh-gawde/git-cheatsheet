#https://help.github.com/en/github/using-git

Setup:
sudo apt-get install git
git config --global user.name "sandesh-gawde"
git config --global user.email "user@example.com"
git config --list   #To view global settings

To initiate:

git init            #creates a new empty Git repository locally with current direcory name
git clone https://url/remote-repository     #Clones remote repository locally by creatingremote-repository directory
git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1 #repo to help visual display of git
git status          #inspects the contents of the working directory and staging area
git add             #adds files from the working directory to the staging area
git diff            #shows the difference between the working directory and the staging area
git commit          #permanently stores file changes from the staging area in the repository
git log             #shows a list of all previous commits

#Sync with remote
git config --global user.name "sandesh-gawde"
git config user.email "email@example.com"
git config --global credential.helper wincred     #cache credentials
git remote add origin https://github.com/sandesh-gawde/Intro_to_C_and_software_design.git   #create remote repo's directory in local
git pull                                                                                    #Pull changes from remote to local
git push -u origin master                                                                   #push changes from local to remote

git show HEAD: The commit you are currently on is known as the HEAD commit.
git checkout HEAD filename (git checkout -- filename): Discards changes in the working directory.
git reset HEAD filename: Unstages file changes in the staging area.
git reset commit_SHA: Resets to a previous commit in your commit history.

git branch: Lists all a Git project’s branches.
git branch branch_name: Creates a new branch.
git checkout branch_name: Used to switch from one branch to another.
git merge branch_name: Used to join file changes from one branch to another, excute command by switching to parent branch.
git branch -d branch_name: Deletes the branch specified.
git branch -D branch_name: Delete un-merged branches.

The workflow for Git collaborations typically follows this order:
Fetch and merge changes from the remote
Create a branch to work on a new project feature
Develop the feature on your branch and commit your work
Fetch and merge from the remote again (in case new commits were made while you were working) (sync local content with GitHub - git pull)
Push your branch up to the remote for review

A remote is a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.
The Git Collaborative Workflow are steps that enable smooth project development when multiple collaborators are working on the same Git project.
We also learned the following commands

git clone: Creates a local copy of a remote.
git remote -v: Lists a Git project’s remotes.
git fetch origin: Fetches work from the remote into the local copy. Just fetches not merge.
git merge origin/master: Merges origin/master into your local branch.
git push origin <branch_name>: Pushes a local branch to the origin remote. Then the origin-master can merge this branch. Local Master is not pushed, any specified branch is pushed to origin Master, NOT changes but branch is pushed.

Additional:
git diff --staged       #show diff b/w staging area and last commit
git log -p              #show changes in each commit with commit-log
git log --stat          #show summary of each commit with commit-log    

* SSH-auth:
On Linux:
$ ssh-keygen -t rsa -b 4096 -C "github_email@gmail.com"
$ eval "$(ssh-agent -s)"
$ ssh-add ~/.ssh/id_rsa
$ cat ~/.ssh/id_rsa.pub     #copy this key
On Git:
Profile - Settings - SSH and GPG Keys - New SSH key - Title(Key-name-TestTool) - insert key
Enter git pw if prompted
On Linux:
ssh -T git@github.com   #To verify
git clone ssh://git@github.com/user-name/repo   #copy url for UI, code, SSH


